@model Test.Models.User

@{
    ViewBag.Title = "Edit User";
}
<head>
    <link rel="stylesheet" href="~/css/styles.css" />
</head>
<!-- Heading Section -->
<h2 class="text-center mb-4">Edit User</h2>

<!-- Form Section -->
<form method="post">

    <!-- Name -->
    <div class="col-md-6 mb-3">
        <label for="Name" class="form-label">Name:</label>
        <input type="text" class="form-control" id="Name" name="Name" value="@Model?.Name" placeholder="Enter your name" required>
    </div>

    <!-- Age -->
    <div class="col-md-6 mb-3">
        <label for="Age" class="form-label">Age:</label>
        <input type="number" class="form-control" id="Age" name="Age" value="@Model?.Age" placeholder="Enter your age" required>
    </div>

    <!-- Phone Number -->
    <div class="col-md-6 mb-3">
        <label for="PhoneNumber" class="form-label">Phone Number:</label>
        <input type="text"
               class="form-control"
               id="PhoneNumber"
               name="PhoneNumber"
               value="@Model?.PhoneNumber"
               placeholder="e.g., 0551234567"
               required
               pattern="(04|05[0-9]|06|07|09)\d{7}"
               title="Phone number must start with a valid UAE code (e.g., 04, 055) and be 9 digits long. Example: 0551234567">
    </div>

    <!-- Date of Birth -->
    <div class="col-md-6 mb-3">
        <label for="DateOfBirth" class="form-label">Date of Birth:</label>
        <input type="date" class="form-control" id="DateOfBirth" name="DateOfBirth" value="@Model?.DateOfBirth.ToString("yyyy-MM-dd")" required>
    </div>


    <!-- Date and Time -->
    <div class="col-md-6 mb-3">
        <label for="DateTime" class="form-label">Date and Time:</label>
        <input type="datetime-local" class="form-control" id="DateTime" name="DateTime" value="@Model?.Time.ToString("yyyy-MM-ddTHH:mm")" required>
    </div>

    <div class="col-md-6 mb-3">
        <label class="form-label" for="IsAvailable">Is Available</label>
        <div class="custom-switch">
            <!-- Hidden input for unchecked state -->
            <input type="hidden" name="IsAvailable" value="false" />

            <!-- Checkbox input -->
            <input type="checkbox" class="custom-switch-input" id="IsAvailable" name="IsAvailable"
                   value="true" @(Model?.IsAvailable == true ? "checked" : "") />

            <label class="custom-switch-label" for="IsAvailable"></label>
        </div>
    </div>


    <!-- Qualification (ComboBox) -->
    <div class="col-md-6 mb-3">
        <label for="Qualification" class="form-label">Highest Qualification:</label>
        <select class="form-control" id="Qualification" name="Qualification" required onselect="@Model?.Qualification">
            <option value="HighSchool">High School</option>
            <option value="Bachelor">Bachelor</option>
            <option value="Master">Master</option>
            <option value="PhD">PhD</option>
        </select>
    </div>


    <!-- Emirates (Dropdown) -->
    <div class="col-md-6 mb-3">
        <label for="Emirates" class="form-label">Emirates:</label>
        <select class="form-control" id="Emirates" name="Emirates" required onselect="@Model?.Emirates">
            <option value="Dubai">Dubai</option>
            <option value="AbuDhabi">Abu Dhabi</option>
            <option value="Sharjah">Sharjah</option>
            <option value="Ajman">Ajman</option>
            <option value="Fujairah">Fujairah</option>
            <option value="UmmAlQuwain">Umm Al Quwain</option>
            <option value="RasAlKhaimah">Ras Al Khaimah</option>
        </select>
    </div>



    <div class="text-center">
        <!-- Submit Button -->
        <button type="submit" class="btn btn-orange">Save Changes</button>
    </div>
</form>
<script>
    document.getElementById('IsAvailable').addEventListener('change', function () {
        this.previousElementSibling.value = this.checked ? 'true' : 'false';
    });
</script>

@* 
<style>
    /* Custom Switch */
    .custom-switch {
        display: inline-block;
        position: relative;
    }

    .custom-switch-input {
        display: none;
    }

    .custom-switch-label {
        display: block;
        position: relative;
        cursor: pointer;
        width: 50px;
        height: 25px;
        background-color: #ccc;
        border-radius: 25px;
        transition: 0.3s;
    }

        .custom-switch-label:before {
            content: '';
            position: absolute;
            top: 3px;
            left: 3px;
            width: 19px;
            height: 19px;
            background-color: white;
            border-radius: 50%;
            transition: 0.3s;
        }

    .custom-switch-input:checked + .custom-switch-label {
        background-color: #ffa500; /* Orange */
    }

        .custom-switch-input:checked + .custom-switch-label:before {
            transform: translateX(25px);
        }

    .btn-orange {
        background-color: #ff6700; /* Orange Button */
        border: none;
        color: white;
    }

        .btn-orange:hover {
            background-color: #ff4500; /* Darker Orange on Hover */
        }
</style> *@